---
import { Icon } from "astro-icon/components";
import { navBarConfig, siteConfig } from "@/config";
import { LinkPresets } from "@constants/link-presets";
import { LinkPreset, type NavBarLink } from "@/types/config";
import { url } from "@utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import Search from "./Search.svelte";
import DisplaySettingsSwitch from "./DisplaySettingsSwitch.svelte";
import NavMenuPanel from "./NavMenuPanel.astro";

const className = Astro.props.class;

let links: NavBarLink[] = navBarConfig.links.map((item: NavBarLink | LinkPreset): NavBarLink => {
  if (typeof item === "number") {
    return LinkPresets[item];
  }
  return item;
});
---

<nav class="onload-animation animate-slide-down-fade-in">
  <div
    class:list={[
      className,
      "card-base overflow-visible! max-w-(--page-width) h-18 rounded-t-none! mx-auto flex items-center justify-between px-4",
    ]}
  >
    <a href={url("/")} class="btn-plain scale-animation rounded-lg h-13 px-5 font-bold active:scale-95">
      <div class="flex flex-row text-(--primary) items-center text-[1.75rem]">
        <Icon name="material-symbols:home-outline-rounded" class="text-[1.75rem] mr-2" />
        {siteConfig.title}
      </div>
    </a>
    <div class="hidden md:flex">
      {
        links.map((l) => {
          return (
            <a
              aria-label={l.name}
              href={l.external ? l.url : url(l.url)}
              target={l.external ? "_blank" : null}
              class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
            >
              <div class="flex items-center">
                {l.name}
                {l.external && (
                  <Icon
                    name="fa6-solid:arrow-up-right-from-square"
                    class="text-[0.875rem] transition -translate-y-px ml-1 text-black/20 dark:text-white/20"
                  />
                )}
              </div>
            </a>
          );
        })
      }
    </div>
    <div class="flex">
      <!--<SearchPanel client:load>-->

      <Search client:idle="svelte" />

      {!siteConfig.themeColor.fixed && <DisplaySettingsSwitch client:idle="svelte" />}

      <LightDarkSwitch client:idle="svelte" />

      <button
        aria-label="Menu"
        name="Nav Menu"
        class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:hidden!"
        id="nav-menu-switch"
      >
        <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]" />
      </button>
    </div>
    <NavMenuPanel links={links} />
  </div>
</nav>

<script>
  function switchTheme() {
    if (localStorage.theme === "dark") {
      document.documentElement.classList.remove("dark");
      localStorage.theme = "light";
    } else {
      document.documentElement.classList.add("dark");
      localStorage.theme = "dark";
    }
  }

  function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
      switchBtn.onclick = function () {
        switchTheme();
      };
    }

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
      menuBtn.onclick = function () {
        let menuPanel = document.getElementById("nav-menu-panel");
        if (menuPanel) {
          menuPanel.classList.toggle("float-panel-closed");
        }
      };
    }
  }

  loadButtonScript();
</script>

<script
  type="module"
  is:inline
  define:vars={{ scriptUrl: url("/pagefind/pagefind.js"), production: import.meta.env.PROD }}
>
  if (production) {
    try {
      const response = await fetch(scriptUrl, { method: "HEAD" });
      if (!response.ok) throw new Error(`Pagefind script not found: ${response.status}`);

      const pagefind = await import(/* @vite-ignore */ scriptUrl);
      await pagefind.options({ excerptLength: 20 });

      window.pagefind = pagefind;
      document.dispatchEvent(new CustomEvent("pagefindready"));
      console.log("Pagefind loaded.");
    } catch (error) {
      console.error("Failed to load Pagefind:", error);
      window.pagefind = { search: () => Promise.resolve({ results: [] }), options: () => Promise.resolve() };
      document.dispatchEvent(new CustomEvent("pagefindloaderror"));
    }
  }
</script>
