---
import { Icon } from "astro-icon/components";
import { navBarConfig, siteConfig } from "@/config";
import { LinkPresets } from "@constants/link-presets";
import { LinkPreset, type NavBarLink } from "@/types/config";
import { url } from "@utils/url-utils";

import LightDarkSwitch from "@components/navbar-widget/LightDarkSwitch.svelte";
import Search from "@components/navbar-widget/Search.svelte";
import DisplaySettingsSwitch from "@components/navbar-widget/DisplaySettingsSwitch.svelte";
import NavMenuPanel from "@components/navbar-widget/NavMenuPanel.astro";

const className = Astro.props.class;

let links: NavBarLink[] = navBarConfig.links.map((item: NavBarLink | LinkPreset): NavBarLink => {
  if (typeof item === "number") {
    return LinkPresets[item];
  }
  return item;
});
---

<header class="fixed top-0 w-full mx-auto transition-all duration-200">
  <div id="header-content-wrapper" class="max-w-(--page-width) mx-auto px-0 md:px-4">
    <div
      class:list={[
        className,
        "card-base flex items-center justify-between",
        "h-(--header-height) overflow-visible! rounded-t-none! px-4",
      ]}
    >
      <a
        href={url("/")}
        class="scale-animation rounded-lg h-13 px-5 font-normal active:scale-95 active:bg-(--btn-plain-bg-active)"
      >
        <div class="flex flex-row text-(--primary) items-center text-[1.75rem]">
          <Icon name="material-symbols:home-outline-rounded" class="text-[1.75rem] mr-2" />
          <span class="pb-0.5"> {siteConfig.title}</span>
        </div>
      </a>
      <nav class="hidden md:flex">
        {
          links.map((l) => {
            return (
              <a
                aria-label={l.name}
                href={l.external ? l.url : url(l.url)}
                target={l.external ? "_blank" : null}
                class="nav-link h-11 font-bold px-5 active:scale-95"
              >
                <div class="flex items-center">
                  <span class="nav-text relative">{l.name}</span>
                  {l.external && (
                    <Icon
                      name="fa6-solid:arrow-up-right-from-square"
                      class="text-[0.875rem] transition -translate-y-px ml-1 text-black/20 dark:text-white/20"
                    />
                  )}
                </div>
              </a>
            );
          })
        }
      </nav>
      <div class="flex">
        <!--<SearchPanel client:load>-->

        <Search client:idle="svelte" />

        {!siteConfig.themeColor.fixed && <DisplaySettingsSwitch client:idle="svelte" />}

        <LightDarkSwitch client:idle="svelte" />

        <button
          aria-label="Menu"
          name="Nav Menu"
          class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:hidden!"
          id="nav-menu-switch"
        >
          <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]" />
        </button>
      </div>
      <NavMenuPanel links={links} />
    </div>
  </div>
</header>

<script>
  function switchTheme() {
    if (localStorage.theme === "dark") {
      document.documentElement.classList.remove("dark");
      localStorage.theme = "light";
    } else {
      document.documentElement.classList.add("dark");
      localStorage.theme = "dark";
    }
  }

  function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
      switchBtn.onclick = function () {
        switchTheme();
      };
    }

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
      menuBtn.onclick = function () {
        let menuPanel = document.getElementById("nav-menu-panel");
        if (menuPanel) {
          menuPanel.classList.toggle("float-panel-closed");
        }
      };
    }
  }

  loadButtonScript();
</script>

<script
  type="module"
  is:inline
  define:vars={{ scriptUrl: url("/pagefind/pagefind.js"), production: import.meta.env.PROD }}
>
  if (production) {
    try {
      const response = await fetch(scriptUrl, { method: "HEAD" });
      if (!response.ok) throw new Error(`Pagefind script not found: ${response.status}`);

      const pagefind = await import(/* @vite-ignore */ scriptUrl);
      await pagefind.options({ excerptLength: 20 });

      window.pagefind = pagefind;
      document.dispatchEvent(new CustomEvent("pagefindready"));
      console.log("Pagefind loaded.");
    } catch (error) {
      console.error("Failed to load Pagefind:", error);
      window.pagefind = { search: () => Promise.resolve({ results: [] }), options: () => Promise.resolve() };
      document.dispatchEvent(new CustomEvent("pagefindloaderror"));
    }
  }
</script>
